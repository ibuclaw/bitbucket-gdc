diff -r ef0d5e8ec06d d/d-codegen.cc
--- a/d/d-codegen.cc	Tue Oct 26 17:16:26 2010 +0100
+++ b/d/d-codegen.cc	Tue Oct 26 18:47:10 2010 +0100
@@ -1680,14 +1680,10 @@
     if ( isErrorMark(exp) )
 	return exp; // backend will ICE otherwise
 
-    tree base_type = TREE_TYPE( exp );
-#if V2
-    if (TREE_CODE( base_type ) == ENUMERAL_TYPE)
-	base_type = TREE_TYPE( TREE_TYPE(exp) );
-#endif
+    gcc_assert(AGGREGATE_TYPE_P( TREE_TYPE( exp)));
     // Get the backend type for the array and pick out the array data
     // pointer field (assumed to be the second field.)
-    tree ptr_field = TREE_CHAIN( TYPE_FIELDS( base_type ));
+    tree ptr_field = TREE_CHAIN( TYPE_FIELDS( TREE_TYPE( exp )));
     //return build2(COMPONENT_REF, TREE_TYPE( ptr_field ), exp, ptr_field);
     return component(exp, ptr_field);
 }
@@ -1698,14 +1694,10 @@
     if ( isErrorMark(exp) )
 	return exp; // backend will ICE otherwise
 
-    tree base_type = TREE_TYPE( exp );
-#if V2
-    if (TREE_CODE( base_type ) == ENUMERAL_TYPE)
-	base_type = TREE_TYPE( TREE_TYPE(exp) );
-#endif
+    gcc_assert(AGGREGATE_TYPE_P( TREE_TYPE( exp )));
     // Get the backend type for the array and pick out the array length
     // field (assumed to be the first field.)
-    tree len_field = TYPE_FIELDS( base_type );
+    tree len_field = TYPE_FIELDS( TREE_TYPE( exp ));
     return component(exp, len_field);
 }
 
@@ -1713,17 +1705,14 @@
 tree
 IRState::darrayVal(tree type, tree len, tree data)
 {
-    tree base_type = type;
-#if V2
-    if (TREE_CODE( base_type ) == ENUMERAL_TYPE)
-	base_type = TREE_TYPE( type );
-#endif
     // %% assert type is a darray
+    gcc_assert(AGGREGATE_TYPE_P( type ));
+
     tree ctor = make_node( CONSTRUCTOR );
     tree len_field, ptr_field;
     CtorEltMaker ce;
 
-    TREE_TYPE( ctor ) = base_type;
+    TREE_TYPE( ctor ) = type;
     TREE_STATIC( ctor ) = 0;   // can be set by caller if needed
     TREE_CONSTANT( ctor ) = 0; // "
     len_field = TYPE_FIELDS( TREE_TYPE( ctor ));
@@ -1740,17 +1729,14 @@
 tree
 IRState::darrayVal(tree type, uinteger_t len, tree data)
 {
-    tree base_type = type;
-#if V2
-    if (TREE_CODE( base_type ) == ENUMERAL_TYPE)
-	base_type = TREE_TYPE( type );
-#endif
     // %% assert type is a darray
+    gcc_assert(AGGREGATE_TYPE_P( type ));
+
     tree ctor = make_node( CONSTRUCTOR );
     tree len_value, ptr_value, len_field, ptr_field;
     CtorEltMaker ce;
 
-    TREE_TYPE( ctor ) = base_type;
+    TREE_TYPE( ctor ) = type;
     TREE_STATIC( ctor ) = 0;   // can be set by caller if needed
     TREE_CONSTANT( ctor ) = 0; // "
     len_field = TYPE_FIELDS( TREE_TYPE( ctor ));
diff -r ef0d5e8ec06d d/d-glue.cc
--- a/d/d-glue.cc	Tue Oct 26 17:16:26 2010 +0100
+++ b/d/d-glue.cc	Tue Oct 26 18:47:10 2010 +0100
@@ -3181,6 +3181,16 @@
 type *
 TypeEnum::toCtype()
 {
+#if V2
+    /* Enums in D2 can have a base type that is not necessarily integral.
+       This caused several problems in both the glue and backend when
+       trying to maintain all assignment, casting and boolean operations
+       you can do with this type. So now instead of building an enum,
+       we just return the memtype.
+     */
+    return sym->memtype->toCtype();
+
+#else
     if (! ctype) {
 	tree enum_mem_type_node = sym->memtype->toCtype();
 
@@ -3190,7 +3200,7 @@
 	TYPE_SIZE( ctype ) = 0; // as in c-decl.c
 	TREE_TYPE( ctype ) = enum_mem_type_node;
 	apply_type_attributes(sym->attributes, ctype, true);
-#if V2
+#if 0
 	/* Because minval and maxval are of this type,
 	   ctype needs to be completed enough for
 	   build_int_cst to work properly. */
@@ -3215,7 +3225,7 @@
 			member->ident->string, NULL);
 		else
 		    ident = (char *) member->ident->string;
-#if V2
+#if 0
 		/* Enums in D2 can be any data type, not just integers. */
 		enum_values.cons(get_identifier(ident), member->value->toElem(& gen));
 #else
@@ -3232,6 +3242,7 @@
 	g.ofile->declareType(ctype, sym);
     }
     return ctype;
+#endif
 }
 
 type *
